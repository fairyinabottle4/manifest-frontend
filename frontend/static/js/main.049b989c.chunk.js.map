{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","PatientPage/PatientPage.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","App.tsx","index.tsx"],"names":["travelClass","FrequentFlyer","apiBaseUrl","setDiagnosisList","diagnosisListFromApi","type","payload","initialState","patients","diagnosis","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","PatientData","useState","patient","setPatient","id","useParams","useEffect","fetchPatient","a","axios","get","patientData","data","console","log","fetchDiagnosisList","error","confirmNumber","totalEntries","entries","length","Card","Content","header","name","extra","Icon","status","freqFlyerIcon","frequentFlyer","Segment","map","entry","index","lastEntry","Header","as","date","route","Divider","section","getEntryView","SelectField","label","options","Form","Field","className","option","TextField","field","placeholder","style","color","firstClassRowOptions","firstClassRowLetters","bizClassRowOptions","bizClassRowLetters","i","push","toString","premiumEconRowOptions","premiumEconRowLetters","econRowOptions","econRowLetters","dietaryRequirements","classOptions","First","Business","PremiumEconomy","Economy","AddPatientForm","onSubmit","onCancel","initialValues","rowNumber","rowLetter","dateOfBirth","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","Modal","open","centered","closeIcon","inverted","HealthRatingBar","rating","Rating","icon","maxRating","PatientListPage","React","setModalOpen","setError","closeModal","undefined","submitNewPatient","post","newPatient","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","seatNumber","App","flightDetails","setFlightDetails","origin","destination","flightNumber","aircraftType","flightInfo","setFlightInfo","patientListFromApi","fetchPatientList","aircraftTypes","display","marginLeft","marginTop","Link","primary","format","ticking","timezone","hidden","path","PatientPage","newValues","toUpperCase","substring","concat","lengthError","flightStyles","ReactDOM","render","action","reduce","memo","code","document","getElementById"],"mappings":"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","file":"static/js/main.049b989c.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum travelClass {\n  First = \"first\",\n  Business = \"business\",\n  PremiumEconomy = \"premium economy\",\n  Economy = \"economy\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  seatNumber?: string;\n  rowNumber: string;\n  frequentFlyer?: FrequentFlyer;\n  rowLetter: string;\n  travelClass: travelClass;\n  dietaryRequirements: string;\n  confirmNumber?: string;\n  entries: BaseEntry[];\n  dateOfBirth?: string;\n  rating?: number;\n}\n\n\nexport interface BaseEntry {\n  id: string;\n  travelClass: travelClass;\n  date: string;\n  route: string;\n}\n\nexport enum FrequentFlyer {\n  Silver = \"silver\",\n  Gold = \"gold\",\n  Platinum = \"platinum\"\n}\n\n\n\n","export const apiBaseUrl = 'http://localhost:3000/api';\n","import { State } from \"./state\";\nimport { Patient, Diagnosis } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"UPDATE_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_DIAGNOSIS_LIST\";\n      payload: Diagnosis[];\n  };\n\n\nexport const setPatientList = (patientList: Patient[]): Action => {\n  return {\n    type: 'SET_PATIENT_LIST',\n    payload: patientList\n  };\n};\n\nexport const setDiagnosisList = (diagnosisListFromApi: Diagnosis[]): Action => {\n  return {\n    type: 'SET_DIAGNOSIS_LIST',\n    payload: diagnosisListFromApi\n  };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_DIAGNOSIS_LIST\":\n      return {\n        ...state,\n        diagnosis: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnosis\n        }\n      };  \n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnosis: { [id: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnosis: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport {\n  Header,\n  Segment,\n  Divider,\n  Card,\n  Icon\n} from 'semantic-ui-react';\n\nimport { Patient, Diagnosis, BaseEntry, FrequentFlyer} from '../types';\nimport { apiBaseUrl } from '../constants';\nimport { useStateValue, setDiagnosisList } from '../state';\nimport { SemanticICONS } from 'semantic-ui-react/dist/commonjs/generic';\n\nconst PatientData: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const [patient, setPatient] = useState<Patient | undefined>();\n\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const { data: patientData } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        setPatient(patientData);\n        dispatch({ type: 'ADD_PATIENT', payload: patientData });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const fetchDiagnosisList = async () => {\n      try {\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnosisList(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    if (patients[id] && patients[id].confirmNumber) {\n      setPatient(patients[id]);\n    } else {\n      void fetchPatient();\n      void fetchDiagnosisList();\n    }\n  }, [id]);\n\n  const getEntryView = (entry: BaseEntry, lastEntry: boolean) => {\n    return (\n      <div>\n        <Header as=\"h4\">{entry.date}</Header>\n        <p>{entry.travelClass}</p>\n        <Header as=\"h3\">{entry.route}</Header>\n        {!lastEntry && <Divider section />}\n      </div>\n    );\n  };\n\n  const freqFlyerIcon = (status: FrequentFlyer | undefined): SemanticICONS => {\n    switch (status) {\n      case 'silver':\n        return 'chess knight';\n      case 'gold':\n        return 'chess rook';\n      case 'platinum':\n        return 'chess king';\n      default:\n        return 'square full';    \n    }\n  };\n\n\n  //entries is optional hence the question mark\n  const totalEntries = patient?.entries?.length ?? 0;\n\n  return (\n    <>\n      {patient && (\n        <section>\n          <Card>\n            <Card.Content header={patient.name} />\n            <Card.Content extra>\n              <Icon name={freqFlyerIcon(patient.frequentFlyer)} />\n              {patient.confirmNumber}\n            </Card.Content>\n          </Card>\n          {totalEntries > 0 && (\n            <>\n              <h2>Recent Flights</h2>\n              <Segment>\n                {patient.entries.map((entry, index) =>\n                  getEntryView(entry, index + 1 === totalEntries)\n                )}\n              </Segment>\n            </>\n          )}\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default PatientData;\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps } from 'formik';\nimport { Form } from 'semantic-ui-react';\nimport { travelClass } from '../types';\n\n// structure of a single option\nexport type TypeOption = {\n  value: travelClass | number | string;\n  label: string | number;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: TypeOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  TextField,\n  SelectField,\n  TypeOption,\n} from './FormField';\nimport {\n  Patient,\n  travelClass\n} from '../types';\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, 'id' | 'entries'>;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst firstClassRowOptions : TypeOption[] = [ { value: '1', label: '1' } ];\nconst firstClassRowLetters: TypeOption[] = [ { value: \"A\", label: \"A\"}, {value: \"C\", label: \"C\"}, {value: \"D\", label:\"D\"}, {value: \"F\", label: \"F\"}];\n//generate all the numbers as key/value pairs that contain a value and a label\nconst bizClassRowOptions : TypeOption[] = [];\nconst bizClassRowLetters: TypeOption[] = [ { value: \"A\", label: \"A\"}, {value: \"D\", label: \"D\"}, {value: \"F\", label:\"F\"}, {value: \"K\", label: \"K\"}];\n//eventually replace numbers based on aircraft type. Alternatively, all this can be stored in a separate file based on\n//aircraft type\nfor (let i = 11; i < 24; i++) {\n  if (i === 13) continue;\n  bizClassRowOptions.push({ value: i.toString(), label: i.toString()});\n}\nconst premiumEconRowOptions: TypeOption[] = [];\nconsole.log(bizClassRowOptions);\n\nfor (let i = 31; i < 34; i++) {\n  premiumEconRowOptions.push({ value: i.toString(), label: i.toString()});\n}\nconst premiumEconRowLetters: TypeOption[] = [ { value: \"A\", label: \"A\"}, {value: \"C\", label: \"C\"}, {value: \"D\", label:\"D\"}, {value: \"E\", label: \"E\"}, {value: \"F\", label: \"F\"}, {value:\"G\", label:\"G\"},\n                                              {value:\"H\", label:\"H\"}, {value:\"K\", label:\"K\"}];\n\nconst econRowOptions: TypeOption[] = [];\n\nfor (let i = 41; i < 62; i++) {\n  econRowOptions.push({ value: i.toString(), label: i.toString()});\n}\n\nconst econRowLetters: TypeOption[] = [{ value: \"A\", label: \"A\"}, { value: \"B\", label: \"B\"}, { value: \"C\", label: \"C\"}, {value: \"D\", label: \"D\"}, {value: \"E\", label:\"E\"},\n                                      {value: \"G\", label: \"G\"}, {value: \"H\", label: \"H\"}, {value: \"J\", label: \"J\"}, {value: \"K\", label: \"K\"}];\n\nconst dietaryRequirements: TypeOption[] = [{value:\"\", label:\"\"},{value: \"BBML\", label: \"BBML Baby Meal\"}, {value: \"CHML\", label:\"CHML Child Meal\"}, {value:\"HNML\", label:\"HNML Hindu Non-Vegetarian Meal\"},\n                                      {value:\"KSML\", label:\"KSML Kosher Meal\"}, {value:\"KSRFM\", label:\"KSRFM Kosher Refreshment\"}, {value:\"MOML\", label:\"MOML Muslim Meal\"},\n                                      {value:\"AVML\", label:\"AVML Vegetarian Indian Meal\"}, {value:\"VJML\", label:\"VJML Vegetarian Jain Meal\"}, {value:\"VOML\",label:\"VOML Vegetarian Oriental Meal\"},\n                                      {value:\"VGML\", label:\"VGML Vegetarian Vegan Meal\"}, {value:\"VLML\",label:\"VLML Vegetarian Lacto-Ovo Meal\"}, {value:\"BLML\",label:\"BLML Bland Meal\"}, \n                                      {value:\"DBML\", label:\"DBML Diabetic Meal\"}, {value:\"FPML\", label:\"FPML Fruit Platter\"}, {value:\"GFML\", label:\"GFML Gluten Intolerant Meal\"}, \n                                      {value:\"LFML\", label:\"LFML Low Fat Meal\"}, {value:\"NLML\", label:\"NLML Low Lactose Meal\"}, {value:\"LSML\", label:\"LSML Low Salt Meal\"}, \n                                      {value:\"MAMLA\", \"label\": \"MAMLA Minimal Allergen Meal\"}, {value:\"NFMLA\", label:\"NFMLA Non-Strict Nut Free Meal\"}, {value: \"NSFML\", label:\"NSFML Non Seafood Meal\"}, \n                                      {value:\"SFML\", label:\"SFML Seafood Meal\"}];\n\nconst classOptions: TypeOption[] = [\n  { value: travelClass.First, label: 'First' },\n  { value: travelClass.Business, label: 'Business' },\n  { value: travelClass.PremiumEconomy, label: 'PremiumEconomy' },\n  { value: travelClass.Economy, label: 'Economy'}\n];\n\n\n// const isValidDate = (dateString: string): boolean => {\n//   const regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n//   // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n//   return dateString.match(regEx) != null;\n// };\n\n\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {  \n  return (\n    <Formik\n      initialValues={{\n        travelClass: travelClass.Economy,\n        dietaryRequirements: '',\n        rowNumber: '41',\n        rowLetter: 'A',\n        name: '',\n        //should do validation check to ensure that the ssn is kept within 6 alphanumeric characters\n        confirmNumber: '',\n        dateOfBirth: '',\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.confirmNumber) {\n          errors.confirmNumber = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, values }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Booking Confirmation\"\n              placeholder=\"6-character alphanumeric\"\n              name=\"confirmNumber\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <SelectField label=\"Class\"  name=\"travelClass\" options={classOptions} />\n            <SelectField label=\"Row Number\" name=\"rowNumber\" options={values.travelClass === \"economy\" ? econRowOptions \n                                            : values.travelClass === \"premium economy\" ? premiumEconRowOptions\n                                            : values.travelClass === \"business\" ? bizClassRowOptions\n                                            : firstClassRowOptions} />\n            <SelectField label=\"Row Letter\" name=\"rowLetter\" options={values.travelClass === \"economy\" ? econRowLetters \n                                : values.travelClass === \"premium economy\" ? premiumEconRowLetters\n                                : values.travelClass === \"business\" ? bizClassRowLetters\n                                : firstClassRowLetters} />\n            <SelectField label=\"Dietary Requirements\" name=\"dietaryRequirements\" options={dietaryRequirements} />\n            {/* <Field label=\"dietary requirement\" placeholder=\"dietary requirements\" name=\"dietaryRequirements\" component={TextField} /> */}\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, {\n  PatientFormValues,\n} from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new passenger</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  //firstTime: boolean\n};\n\nconst HealthRatingBar = ({ rating }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"star\" disabled rating={rating} maxRating={5} />}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue } from \"../state\";\n\nconst PatientListPage = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    console.log(values);\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response?.data || 'Unknown Error');\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Passenger Manifest</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Seat Number</Table.HeaderCell>\n            <Table.HeaderCell>Travel Class</Table.HeaderCell>\n            <Table.HeaderCell>Dietary Requirements</Table.HeaderCell>\n            <Table.HeaderCell>Airline Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell> <Link to={`/patients/${patient.id}`}>{patient.name}</Link> </Table.Cell>\n              <Table.Cell>{patient.seatNumber}</Table.Cell>\n              <Table.Cell>{patient.travelClass}</Table.Cell>\n              <Table.Cell>{patient.dietaryRequirements}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar rating={patient.rating!}/>\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Passenger</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React, {useState} from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\nimport Clock from 'react-live-clock';\nimport PatientPage from './PatientPage/PatientPage';\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\nimport { Formik, Field, Form } from \"formik\";\nimport { TextField, SelectField } from \"./AddPatientModal/FormField\";\n\nimport PatientListPage from \"./PatientListPage\";\n\nconst App = () => {\n\n  const [flightDetails, setFlightDetails] = useState(false);\n  const [flightInfo, setFlightInfo] = useState({origin: \"\", destination: \"\", flightNumber: \"\", aircraftType: \"\"});\n  \n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    void axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n    const fetchDiagnosisList = async () => {\n      try {\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnosisList(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchDiagnosisList();\n  }, [dispatch]);\n\n  const onSubmit = (values: { origin: string; destination: string; aircraftType: string; flightNumber: string}) => {\n    setFlightDetails(true);\n    const newValues = {\n      origin: values.origin.toUpperCase(),\n      destination: values.destination.toUpperCase(),\n      flightNumber: values.flightNumber.substring(0,2).toUpperCase().concat(values.flightNumber.substring(2)),\n      aircraftType: values.aircraftType\n    };\n    setFlightInfo(newValues);\n    console.log(newValues);\n  };\n\n  const aircraftTypes = [{value: \"\", label:\"\"},{value:\"Boeing 777\", label: \"Boeing 777\"}, \n      {value: \"Boeing 787\", label: \"Boeing 787\"}, {value: \"Airbus 350\", label: \"Airbus 350\"}];\n\n  if (flightDetails) {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Container>\n            <Header as=\"h1\">Broadwing Airlines</Header>\n            <div style={{display: 'flex'}}>\n              <h2>{flightInfo.flightNumber}</h2>\n              <p style={{marginLeft: '5px', marginTop: '8px'}}>{flightInfo.origin}-{flightInfo.destination}</p>\n            </div>\n            <Button as={Link} to=\"/\" primary>\n              Home\n            </Button>\n            <Clock format={'HH:mm:ss'} ticking={true} timezone={'Asia/Singapore'} />\n            <Divider hidden />\n            <Switch>\n              <Route path='/patients/:id'>\n                <PatientPage />\n              </Route>\n              <Route path=\"/\">\n                <PatientListPage />\n              </Route>\n            </Switch>\n          </Container>\n        </Router>\n    </div>\n\n    );\n  }\n\n  return (\n    \n    <Formik initialValues={{\n      origin: '',\n      destination: '',\n      aircraftType: '',\n      flightNumber: ''\n    }}\n    onSubmit={(values) => onSubmit(values)}\n    validate={(values) => {\n      const requiredError = 'Field is required';\n      const lengthError = 'IATA Airport code must be exactly 3 characters long';\n      const flightNumLengthError = \"Flight number must be 5 or 6 digits long\";\n      const errors: { [field: string]: string} = {};\n      if (!values.origin) {\n        errors.origin = requiredError;\n      }\n      if (!values.destination) {\n        errors.destination = requiredError;\n      }\n      if (!values.aircraftType) {\n        errors.aircraftType = requiredError;\n      }\n      if (values.origin.length !== 3) {\n        errors.origin = lengthError;\n      }\n      if (values.destination.length !== 3) {\n        errors.destination = lengthError;\n      }\n      if (values.flightNumber.length > 6 || values.flightNumber.length < 5) {\n        errors.flightNumber = flightNumLengthError;\n      }\n      return errors;\n    }}\n    >\n      {() => {\n        return (\n          <div style={flightStyles}>\n            <Header as=\"h1\">Broadwing Airlines</Header>\n            <Form>\n              <Field\n                label=\"Origin\"\n                placeholder=\"3 letter IATA airport code\"\n                name=\"origin\"\n                component={TextField}\n                />\n              <Field\n                label=\"Destination\"\n                placeholder=\"3 letter IATA airport code\"\n                name=\"destination\"\n                component={TextField}\n              />\n              <Field\n                label=\"Flight Number\"\n                placeholder=\"Flight Number\"\n                name=\"flightNumber\"\n                component={TextField}\n              />\n              <SelectField \n                label=\"Aircraft type\" name=\"aircraftType\" options={aircraftTypes} />\n              <Button type=\"submit\" color=\"green\">\n                Continue\n              </Button>\n            </Form>\n\n          </div>\n        );\n      }}\n    \n    </Formik>\n\n\n  );\n};\n\nexport default App;\n\n\nconst flightStyles = {\n  marginTop: \"20%\",\n  marginLeft: \"45%\",\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}